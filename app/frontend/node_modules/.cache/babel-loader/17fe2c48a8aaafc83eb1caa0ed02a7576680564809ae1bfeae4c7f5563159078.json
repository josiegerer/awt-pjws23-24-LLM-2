{"ast":null,"code":"import axios from 'axios';\nexport default {\n  props: [\"chat\"],\n  data() {\n    return {\n      chats: [],\n      selectedChat: null,\n      userInput: ''\n    };\n  },\n  created() {\n    console.log('UserChats component created. User ID:', this.$route.params.id);\n    this.fetchChats();\n  },\n  methods: {\n    async fetchChats() {\n      try {\n        console.log(`${this.$route.params.id}`);\n        const response = await axios.get(`http://localhost:5000/user_chats/${this.$route.params.id}`);\n        this.chats = response.data;\n      } catch (error) {\n        console.error('Error fetching chats:', error);\n      }\n    },\n    handleChatClick(chat) {\n      console.log(`Clicked on chat: ${chat.chat_name}`);\n      this.selectedChat = chat;\n    },\n    splitMessages(messages) {\n      return messages.split('\\\\n');\n    },\n    async createNewChatPrompt() {\n      const newChatName = prompt('Enter the name for the new chat:');\n      if (newChatName !== null && newChatName !== '') {\n        await this.createNewChat(newChatName);\n      }\n    },\n    async createNewChat(chatName) {\n      try {\n        await axios.post(`http://localhost:5000/add_chat`, {\n          user_id: this.$route.params.id,\n          chat_name: chatName,\n          messages: ''\n        });\n        this.fetchChats();\n      } catch (error) {\n        console.error('Error creating new chat:', error);\n      }\n    },\n    async sendMessage() {\n      const message = this.userInput.trim();\n      if (message !== '') {\n        console.log('Sending message:', message);\n        try {\n          // Determine the parameter based on the checkbox state\n          const parameterName = this.grammarAssistant ? 'grammar' : 'conversation';\n          const chatType = this.informalAssistant ? 'informal' : 'formal';\n\n          // Call the backend endpoint to process and update messages\n          const response = await axios.post(`http://localhost:5000/process_message/${this.selectedChat.chat_id}`, {\n            message: message,\n            [parameterName]: true,\n            // Add the parameter dynamically\n            [chatType]: true // Add the informal/formal parameter dynamically\n          });\n\n          // Check for success and update the frontend\n          if (response.data.success) {\n            const processedMessage = response.data.message;\n\n            // Fetch the updated list of chats\n            await this.fetchChats();\n\n            // Display the processed message\n            this.selectedChat.messages += \"\\\\n\" + message + \"\\\\n\" + processedMessage;\n          } else {\n            console.error('Error processing message:', response.data.error);\n          }\n          this.userInput = ''; // Clear the input field after sending\n        } catch (error) {\n          console.error('Error sending message:', error);\n        }\n      }\n    },\n    async updateChatMessages(chatId, newMessage) {\n      try {\n        // Make a request to the backend to update the chat messages\n        await axios.post(`http://localhost:5000/add_message/${chatId}`, {\n          message: newMessage\n        });\n      } catch (error) {\n        console.error('Error updating chat messages:', error);\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","props","data","chats","selectedChat","userInput","created","console","log","$route","params","id","fetchChats","methods","response","get","error","handleChatClick","chat","chat_name","splitMessages","messages","split","createNewChatPrompt","newChatName","prompt","createNewChat","chatName","post","user_id","sendMessage","message","trim","parameterName","grammarAssistant","chatType","informalAssistant","chat_id","success","processedMessage","updateChatMessages","chatId","newMessage"],"sources":["/Users/josi/Documents/GitHub/awt-pjws23-24-LLM-2/app/frontend/src/components/UserChats.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-wrapper\">\r\n    <div class=\"sidebar\">\r\n      <div>\r\n        <p class=\"side-head\">Chats</p>\r\n      </div>\r\n      <div @click=\"createNewChatPrompt\" class=\"clickable\">\r\n        <p class=\"new-box clickable\">New Chat</p>\r\n      </div>\r\n      <div v-for=\"chat in chats\" :key=\"chat.chat_id\" class=\"chat-box\" @click=\"handleChatClick(chat)\">\r\n        {{ chat.chat_name }}\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-if=\"selectedChat\" class=\"message-wrapper\">\r\n      <h2>\r\n        Messages for {{ selectedChat.chat_name }}\r\n      </h2>\r\n      <input type=\"checkbox\" id=\"grammarAssistant\" v-model=\"grammarAssistant\">\r\n      <label for=\"grammarAssistant\">Switch to Grammar Assistant</label>\r\n      <input type=\"checkbox\" id=\"informalCheckbox\" v-model=\"informalAssistant\">\r\n      <label for=\"informalCheckbox\">Switch to Informal</label>\r\n      <div v-for=\"(message, index) in splitMessages(selectedChat.messages)\" :key=\"index\" class=\"message-box\" :class=\"{ 'left': index % 2 === 0, 'right': index % 2 !== 0 }\">\r\n\r\n        <div v-if=\"index % 2 === 0\">\r\n          <p class=\"left\">AI</p>\r\n          {{ message }}\r\n        </div>\r\n        <div v-else>\r\n          <p class=\"right\">User</p>\r\n          {{ message }} \r\n        </div>\r\n      </div>\r\n    </div> \r\n\r\n    <!-- Text input field and button with added styling -->\r\n    <div class=\"bottom-input\">\r\n      <input v-model=\"userInput\" type=\"text\" placeholder=\"Type your message...\" class=\"message-input\">\r\n      <button @click=\"sendMessage\" class=\"send-button\">Send</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  props: [\"chat\"],\r\n  data() {\r\n    return {\r\n      chats: [],\r\n      selectedChat: null,\r\n      userInput: '',\r\n    };\r\n  },\r\n  created() {\r\n    console.log('UserChats component created. User ID:', this.$route.params.id);\r\n    this.fetchChats();\r\n  },\r\n  methods: {\r\n    async fetchChats() {\r\n      try {\r\n        console.log(`${this.$route.params.id}`);\r\n        const response = await axios.get(`http://localhost:5000/user_chats/${this.$route.params.id}`);\r\n        this.chats = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching chats:', error);\r\n      }\r\n    },\r\n    handleChatClick(chat) {\r\n      console.log(`Clicked on chat: ${chat.chat_name}`);\r\n      this.selectedChat = chat;\r\n    },\r\n    splitMessages(messages) {\r\n      return messages.split('\\\\n');\r\n    },\r\n    async createNewChatPrompt() {\r\n      const newChatName = prompt('Enter the name for the new chat:');\r\n      if (newChatName !== null && newChatName !== '') {\r\n        await this.createNewChat(newChatName);\r\n      }\r\n    },\r\n    async createNewChat(chatName) {\r\n      try {\r\n        await axios.post(`http://localhost:5000/add_chat`, {\r\n          user_id: this.$route.params.id,\r\n          chat_name: chatName,\r\n          messages: '',\r\n        });\r\n\r\n        this.fetchChats();\r\n      } catch (error) {\r\n        console.error('Error creating new chat:', error);\r\n      }\r\n    },\r\n    async sendMessage() {\r\n      const message = this.userInput.trim();\r\n      if (message !== '') {\r\n        console.log('Sending message:', message);\r\n\r\n        try {\r\n          // Determine the parameter based on the checkbox state\r\n          const parameterName = this.grammarAssistant ? 'grammar' : 'conversation';\r\n          const chatType = this.informalAssistant ? 'informal' : 'formal';\r\n\r\n          // Call the backend endpoint to process and update messages\r\n          const response = await axios.post(`http://localhost:5000/process_message/${this.selectedChat.chat_id}`, {\r\n            message: message,\r\n            [parameterName]: true, // Add the parameter dynamically\r\n            [chatType]: true, // Add the informal/formal parameter dynamically\r\n          });\r\n\r\n          // Check for success and update the frontend\r\n          if (response.data.success) {\r\n            const processedMessage = response.data.message;\r\n\r\n            // Fetch the updated list of chats\r\n            await this.fetchChats();\r\n\r\n            // Display the processed message\r\n            this.selectedChat.messages += \"\\\\n\" + message + \"\\\\n\" + processedMessage;\r\n          } else {\r\n            console.error('Error processing message:', response.data.error);\r\n          }\r\n\r\n          this.userInput = ''; // Clear the input field after sending\r\n        } catch (error) {\r\n          console.error('Error sending message:', error);\r\n        }\r\n      }\r\n    },\r\n\r\n    async updateChatMessages(chatId, newMessage) {\r\n      try {\r\n        // Make a request to the backend to update the chat messages\r\n        await axios.post(`http://localhost:5000/add_message/${chatId}`, {\r\n          message: newMessage,\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating chat messages:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nbody {\r\n  background-color: #f1f1f1; /* Set your default background color */\r\n  margin: 0; /* Remove default body margin */\r\n  font-family: 'Arial', sans-serif;\r\n}\r\n\r\n.bottom-input {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 20px;\r\n  margin-left: 220px;\r\n  margin-right: 450px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 8px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.send-button {\r\n  padding: 8px 16px;\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-box {\r\n  display: block;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color: #6b6464;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  color: #f3f1f1;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.chat-box:hover {\r\n  background-color: #f0f0f0;\r\n  color: #6b6464\r\n}\r\n\r\n.new-box {\r\n  display: block;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color: #050404;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  color: #ffffff;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.new-box:hover {\r\n  background-color: #f0f0f0;\r\n  color: #6b6464\r\n}\r\n\r\n.sidebar {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 200px;\r\n  background-color: #242020;\r\n  overflow: auto;\r\n  z-index: 1; /* Set z-index for the chat names list */\r\n}\r\n\r\n.message-wrapper {\r\n  margin-left: 220px; /* Adjust as needed to avoid overlap with the sidebar */\r\n}\r\n\r\nh2 {\r\n  color: #242020;\r\n}\r\n\r\n.message-box {\r\n  padding: 10px;\r\n  margin: 5px 0;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color: #ffffff;\r\n  color: #333;\r\n}\r\n\r\n.left {\r\n  text-align: left;\r\n  background-color: #c7f0ce;\r\n}\r\n\r\n.right {\r\n  text-align: right;\r\n  background-color: #ccd2eb;\r\n}\r\n\r\n.side-head {\r\n  color: #ffffff;\r\n}\r\n\r\n.who {\r\n  background-color: #ffffff;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}