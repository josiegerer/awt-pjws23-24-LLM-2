{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, vModelCheckbox as _vModelCheckbox, withDirectives as _withDirectives, createTextVNode as _createTextVNode, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, vModelText as _vModelText } from \"vue\";\nconst _hoisted_1 = {\n  class: \"chat-wrapper\"\n};\nconst _hoisted_2 = {\n  class: \"sidebar\"\n};\nconst _hoisted_3 = /*#__PURE__*/_createElementVNode(\"div\", null, [/*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"side-head\"\n}, \"Chats\")], -1 /* HOISTED */);\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"new-box clickable\"\n}, \"New Chat\", -1 /* HOISTED */);\nconst _hoisted_5 = [_hoisted_4];\nconst _hoisted_6 = [\"onClick\"];\nconst _hoisted_7 = {\n  key: 0,\n  class: \"message-wrapper\"\n};\nconst _hoisted_8 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"grammarAssistant\"\n}, \"Switch to Grammar Assistant\", -1 /* HOISTED */);\nconst _hoisted_9 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"informalCheckbox\"\n}, \"Switch to Informal\", -1 /* HOISTED */);\nconst _hoisted_10 = {\n  key: 0\n};\nconst _hoisted_11 = /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"left\"\n}, \"AI\", -1 /* HOISTED */);\nconst _hoisted_12 = {\n  key: 1\n};\nconst _hoisted_13 = /*#__PURE__*/_createElementVNode(\"p\", {\n  class: \"right\"\n}, \"User\", -1 /* HOISTED */);\nconst _hoisted_14 = {\n  class: \"bottom-input\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_hoisted_3, _createElementVNode(\"div\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => $options.createNewChatPrompt && $options.createNewChatPrompt(...args)),\n    class: \"clickable\"\n  }, [..._hoisted_5]), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.chats, chat => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: chat.chat_id,\n      class: \"chat-box\",\n      onClick: $event => $options.handleChatClick(chat)\n    }, _toDisplayString(chat.chat_name), 9 /* TEXT, PROPS */, _hoisted_6);\n  }), 128 /* KEYED_FRAGMENT */))]), $data.selectedChat ? (_openBlock(), _createElementBlock(\"div\", _hoisted_7, [_createElementVNode(\"h2\", null, \" Messages for \" + _toDisplayString($data.selectedChat.chat_name), 1 /* TEXT */), _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    id: \"grammarAssistant\",\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => _ctx.grammarAssistant = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, _ctx.grammarAssistant]]), _hoisted_8, _withDirectives(_createElementVNode(\"input\", {\n    type: \"checkbox\",\n    id: \"informalCheckbox\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => _ctx.informalAssistant = $event)\n  }, null, 512 /* NEED_PATCH */), [[_vModelCheckbox, _ctx.informalAssistant]]), _hoisted_9, (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.splitMessages($data.selectedChat.messages), (message, index) => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: index,\n      class: _normalizeClass([\"message-box\", {\n        'left': index % 2 === 0,\n        'right': index % 2 !== 0\n      }])\n    }, [index % 2 === 0 ? (_openBlock(), _createElementBlock(\"div\", _hoisted_10, [_hoisted_11, _createTextVNode(\" \" + _toDisplayString(message), 1 /* TEXT */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_12, [_hoisted_13, _createTextVNode(\" \" + _toDisplayString(message), 1 /* TEXT */)]))], 2 /* CLASS */);\n  }), 128 /* KEYED_FRAGMENT */))])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Text input field and button with added styling \"), _createElementVNode(\"div\", _hoisted_14, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[3] || (_cache[3] = $event => $data.userInput = $event),\n    type: \"text\",\n    placeholder: \"Type your message...\",\n    class: \"message-input\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.userInput]]), _createElementVNode(\"button\", {\n    onClick: _cache[4] || (_cache[4] = (...args) => $options.sendMessage && $options.sendMessage(...args)),\n    class: \"send-button\"\n  }, \"Send\")])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_hoisted_4","for","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","onClick","_cache","args","$options","createNewChatPrompt","_Fragment","_renderList","$data","chats","chat","key","chat_id","$event","handleChatClick","chat_name","_hoisted_6","selectedChat","_hoisted_7","_toDisplayString","type","id","_ctx","grammarAssistant","_hoisted_8","informalAssistant","_hoisted_9","splitMessages","messages","message","index","_normalizeClass","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_createCommentVNode","_hoisted_14","userInput","placeholder","sendMessage"],"sources":["/Users/josi/Documents/GitHub/awt-pjws23-24-LLM-2/app/frontend/src/components/UserChats.vue"],"sourcesContent":["<template>\r\n  <div class=\"chat-wrapper\">\r\n    <div class=\"sidebar\">\r\n      <div>\r\n        <p class=\"side-head\">Chats</p>\r\n      </div>\r\n      <div @click=\"createNewChatPrompt\" class=\"clickable\">\r\n        <p class=\"new-box clickable\">New Chat</p>\r\n      </div>\r\n      <div v-for=\"chat in chats\" :key=\"chat.chat_id\" class=\"chat-box\" @click=\"handleChatClick(chat)\">\r\n        {{ chat.chat_name }}\r\n      </div>\r\n    </div>\r\n    \r\n    <div v-if=\"selectedChat\" class=\"message-wrapper\">\r\n      <h2>\r\n        Messages for {{ selectedChat.chat_name }}\r\n      </h2>\r\n      <input type=\"checkbox\" id=\"grammarAssistant\" v-model=\"grammarAssistant\">\r\n      <label for=\"grammarAssistant\">Switch to Grammar Assistant</label>\r\n      <input type=\"checkbox\" id=\"informalCheckbox\" v-model=\"informalAssistant\">\r\n      <label for=\"informalCheckbox\">Switch to Informal</label>\r\n      <div v-for=\"(message, index) in splitMessages(selectedChat.messages)\" :key=\"index\" class=\"message-box\" :class=\"{ 'left': index % 2 === 0, 'right': index % 2 !== 0 }\">\r\n\r\n        <div v-if=\"index % 2 === 0\">\r\n          <p class=\"left\">AI</p>\r\n          {{ message }}\r\n        </div>\r\n        <div v-else>\r\n          <p class=\"right\">User</p>\r\n          {{ message }} \r\n        </div>\r\n      </div>\r\n    </div> \r\n\r\n    <!-- Text input field and button with added styling -->\r\n    <div class=\"bottom-input\">\r\n      <input v-model=\"userInput\" type=\"text\" placeholder=\"Type your message...\" class=\"message-input\">\r\n      <button @click=\"sendMessage\" class=\"send-button\">Send</button>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\n\r\nexport default {\r\n  props: [\"chat\"],\r\n  data() {\r\n    return {\r\n      chats: [],\r\n      selectedChat: null,\r\n      userInput: '',\r\n    };\r\n  },\r\n  created() {\r\n    console.log('UserChats component created. User ID:', this.$route.params.id);\r\n    this.fetchChats();\r\n  },\r\n  methods: {\r\n    async fetchChats() {\r\n      try {\r\n        console.log(`${this.$route.params.id}`);\r\n        const response = await axios.get(`http://localhost:5000/user_chats/${this.$route.params.id}`);\r\n        this.chats = response.data;\r\n      } catch (error) {\r\n        console.error('Error fetching chats:', error);\r\n      }\r\n    },\r\n    handleChatClick(chat) {\r\n      console.log(`Clicked on chat: ${chat.chat_name}`);\r\n      this.selectedChat = chat;\r\n    },\r\n    splitMessages(messages) {\r\n      return messages.split('\\\\n');\r\n    },\r\n    async createNewChatPrompt() {\r\n      const newChatName = prompt('Enter the name for the new chat:');\r\n      if (newChatName !== null && newChatName !== '') {\r\n        await this.createNewChat(newChatName);\r\n      }\r\n    },\r\n    async createNewChat(chatName) {\r\n      try {\r\n        await axios.post(`http://localhost:5000/add_chat`, {\r\n          user_id: this.$route.params.id,\r\n          chat_name: chatName,\r\n          messages: '',\r\n        });\r\n\r\n        this.fetchChats();\r\n      } catch (error) {\r\n        console.error('Error creating new chat:', error);\r\n      }\r\n    },\r\n    async sendMessage() {\r\n      const message = this.userInput.trim();\r\n      if (message !== '') {\r\n        console.log('Sending message:', message);\r\n\r\n        try {\r\n          // Determine the parameter based on the checkbox state\r\n          const parameterName = this.grammarAssistant ? 'grammar' : 'conversation';\r\n          const chatType = this.informalAssistant ? 'informal' : 'formal';\r\n\r\n          // Call the backend endpoint to process and update messages\r\n          const response = await axios.post(`http://localhost:5000/process_message/${this.selectedChat.chat_id}`, {\r\n            message: message,\r\n            [parameterName]: true, // Add the parameter dynamically\r\n            [chatType]: true, // Add the informal/formal parameter dynamically\r\n          });\r\n\r\n          // Check for success and update the frontend\r\n          if (response.data.success) {\r\n            const processedMessage = response.data.message;\r\n\r\n            // Fetch the updated list of chats\r\n            await this.fetchChats();\r\n\r\n            // Display the processed message\r\n            this.selectedChat.messages += \"\\\\n\" + message + \"\\\\n\" + processedMessage;\r\n          } else {\r\n            console.error('Error processing message:', response.data.error);\r\n          }\r\n\r\n          this.userInput = ''; // Clear the input field after sending\r\n        } catch (error) {\r\n          console.error('Error sending message:', error);\r\n        }\r\n      }\r\n    },\r\n\r\n    async updateChatMessages(chatId, newMessage) {\r\n      try {\r\n        // Make a request to the backend to update the chat messages\r\n        await axios.post(`http://localhost:5000/add_message/${chatId}`, {\r\n          message: newMessage,\r\n        });\r\n      } catch (error) {\r\n        console.error('Error updating chat messages:', error);\r\n      }\r\n    },\r\n  },\r\n};\r\n</script>\r\n\r\n<style>\r\nbody {\r\n  background-color: #f1f1f1; /* Set your default background color */\r\n  margin: 0; /* Remove default body margin */\r\n  font-family: 'Arial', sans-serif;\r\n}\r\n\r\n.bottom-input {\r\n  display: flex;\r\n  align-items: center;\r\n  margin-top: 20px;\r\n  margin-left: 220px;\r\n  margin-right: 450px;\r\n}\r\n\r\n.message-input {\r\n  flex: 1;\r\n  padding: 8px;\r\n  margin-right: 10px;\r\n}\r\n\r\n.send-button {\r\n  padding: 8px 16px;\r\n  background-color: #4caf50;\r\n  color: #fff;\r\n  border: none;\r\n  cursor: pointer;\r\n}\r\n\r\n.chat-box {\r\n  display: block;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color: #6b6464;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  color: #f3f1f1;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n}\r\n\r\n.chat-box:hover {\r\n  background-color: #f0f0f0;\r\n  color: #6b6464\r\n}\r\n\r\n.new-box {\r\n  display: block;\r\n  margin: 10px 0;\r\n  padding: 10px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color: #050404;\r\n  text-align: center;\r\n  text-decoration: none;\r\n  color: #ffffff;\r\n  cursor: pointer;\r\n  transition: background-color 0.3s;\r\n  margin-bottom: 30px;\r\n}\r\n\r\n.new-box:hover {\r\n  background-color: #f0f0f0;\r\n  color: #6b6464\r\n}\r\n\r\n.sidebar {\r\n  position: fixed;\r\n  top: 0;\r\n  left: 0;\r\n  height: 100%;\r\n  width: 200px;\r\n  background-color: #242020;\r\n  overflow: auto;\r\n  z-index: 1; /* Set z-index for the chat names list */\r\n}\r\n\r\n.message-wrapper {\r\n  margin-left: 220px; /* Adjust as needed to avoid overlap with the sidebar */\r\n}\r\n\r\nh2 {\r\n  color: #242020;\r\n}\r\n\r\n.message-box {\r\n  padding: 10px;\r\n  margin: 5px 0;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);\r\n  background-color: #ffffff;\r\n  color: #333;\r\n}\r\n\r\n.left {\r\n  text-align: left;\r\n  background-color: #c7f0ce;\r\n}\r\n\r\n.right {\r\n  text-align: right;\r\n  background-color: #ccd2eb;\r\n}\r\n\r\n.side-head {\r\n  color: #ffffff;\r\n}\r\n\r\n.who {\r\n  background-color: #ffffff;\r\n}\r\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}