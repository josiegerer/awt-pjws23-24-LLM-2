{"ast":null,"code":"export default {\n  mounted() {\n    const chatMessages = document.getElementById('chat-messages');\n    const userInput = document.getElementById('user-input');\n    const sendButton = document.getElementById('send-button');\n    function appendUserMessage(message) {\n      const userMessageDiv = document.createElement('div');\n      userMessageDiv.className = 'user-message';\n      userMessageDiv.textContent = message;\n      chatMessages.appendChild(userMessageDiv);\n    }\n    function appendBotMessage(message) {\n      const botMessageDiv = document.createElement('div');\n      botMessageDiv.className = 'bot-message';\n      botMessageDiv.textContent = message;\n      chatMessages.appendChild(botMessageDiv);\n    }\n    function sendMessage() {\n      const userMessage = userInput.value;\n      if (userMessage.trim() !== '') {\n        if (userMessage.trim().toLowerCase() == 'clear') {\n          clearChat();\n        } else {\n          setTimeout(() => {\n            appendUserMessage(userMessage);\n          }, 300);\n          setTimeout(() => {\n            simulateBotTyping();\n          }, 1300);\n        }\n      }\n      userInput.value = '';\n    }\n    function simulateBotTyping(selectedLanguage, selectedLanguageStyle) {\n      // Add \"typing\" indicator message to chat messages\n      const typingIndicator = 'typing...';\n      const typingIndicatorDiv = document.createElement('div');\n      const chatHeader = document.querySelector('.chat-header');\n      const typingDuration = 1500;\n      let botResponse = \"\";\n      typingIndicatorDiv.className = 'bot-message typing-indicator';\n      typingIndicatorDiv.textContent = typingIndicator;\n      chatMessages.appendChild(typingIndicatorDiv);\n\n      // Add typing class to trigger animation\n      chatMessages.classList.add('typing');\n      setTimeout(() => {\n        // Remove typing class and typing indicator message to stop animation\n        chatMessages.classList.remove('typing');\n        typingIndicatorDiv.remove();\n        if (chatHeader.textContent.trim() === 'choose the language you want to learn') {\n          botResponse = 'Please select a language and style you want to learn';\n        } else {\n          botResponse = 'Hello, I am langchatAI and I will help you learn ' + selectedLanguageStyle + ' ' + selectedLanguage + '!';\n        }\n        appendBotMessage(botResponse);\n\n        // Scroll chat messages container to the bottom to show the new message\n        chatMessages.scrollTop = chatMessages.scrollHeight;\n      }, typingDuration);\n    }\n\n    // Clear all chat messages\n    function clearChat() {\n      chatMessages.innerHTML = '';\n    }\n\n    // Event listeners for sending messages\n    sendButton.addEventListener('click', sendMessage);\n    userInput.addEventListener('keydown', function (event) {\n      if (event.key === 'Enter') {\n        sendMessage();\n      }\n    });\n\n    //Get Input from Buttons (Language, Style and Difficulty) to use in Chat Window\n    document.addEventListener(\"DOMContentLoaded\", function () {\n      const languageBubbles = document.querySelectorAll('.language-bubble');\n      const languageStyleButtons = document.querySelectorAll('.language-style-btn');\n      const languageDiffButtons = document.querySelectorAll('.language-diff-btn');\n      const chatHeader = document.querySelector('.chat-header');\n      let selectedLanguage = '';\n      let selectedLanguageStyle = '';\n      let selectedLanguageDiff = '';\n      languageBubbles.forEach(bubble => {\n        bubble.addEventListener('click', function () {\n          // Get the selected language from the clicked bubble\n          selectedLanguage = bubble.dataset.language;\n\n          // Remove 'selected' class from all language bubbles and style/diff buttons & Add 'selected' class to the clicked bubble\n          languageBubbles.forEach(b => b.classList.remove('selected'));\n          languageStyleButtons.forEach(btn => btn.classList.remove('selected'));\n          languageDiffButtons.forEach(btn => btn.classList.remove('selected'));\n          bubble.classList.add('selected');\n\n          // Update chat header with selected language\n          chatHeader.textContent = 'Please select a language style and difficulty level for the ' + selectedLanguage + ' Bot';\n          clearChat();\n        });\n      });\n      languageDiffButtons.forEach(button => {\n        button.addEventListener('click', function () {\n          languageDiffButtons.forEach(btn => btn.classList.remove('selected'));\n          selectedLanguageDiff = button.getAttribute('lang-diff');\n          button.classList.add('selected');\n          updateChatHeader();\n        });\n      });\n      languageStyleButtons.forEach(button => {\n        button.addEventListener('click', function () {\n          languageStyleButtons.forEach(btn => btn.classList.remove('selected'));\n          selectedLanguageStyle = button.getAttribute('lang-style');\n          button.classList.add('selected');\n          updateChatHeader();\n        });\n      });\n      function updateChatHeader() {\n        if (selectedLanguageStyle && selectedLanguageDiff) {\n          chatHeader.textContent = selectedLanguageDiff + ' ' + selectedLanguageStyle + ' ' + selectedLanguage + ' Bot';\n          simulateBotTyping(selectedLanguage, selectedLanguageStyle);\n        }\n      }\n    });\n  }\n};","map":{"version":3,"names":["mounted","chatMessages","document","getElementById","userInput","sendButton","appendUserMessage","message","userMessageDiv","createElement","className","textContent","appendChild","appendBotMessage","botMessageDiv","sendMessage","userMessage","value","trim","toLowerCase","clearChat","setTimeout","simulateBotTyping","selectedLanguage","selectedLanguageStyle","typingIndicator","typingIndicatorDiv","chatHeader","querySelector","typingDuration","botResponse","classList","add","remove","scrollTop","scrollHeight","innerHTML","addEventListener","event","key","languageBubbles","querySelectorAll","languageStyleButtons","languageDiffButtons","selectedLanguageDiff","forEach","bubble","dataset","language","b","btn","button","getAttribute","updateChatHeader"],"sources":["/Users/josi/Documents/GitHub/awt-pjws23-24-LLM-2/app/frontend/src/components/ChatWindow.vue"],"sourcesContent":["<template>\n    <div id=\"app\" class=\"chatwindow\">\n        <div class=\"language-style-div\">\n            <h6> Language Style</h6>\n            <div>\n                <button class=\"language-style-btn\" lang-style=\"Informal\">Informal</button>  \n            </div>\n            <div>\n                <button class=\"language-style-btn\" lang-style=\"Formal\">Formal</button> \n            </div>\n            <div>\n                <button class=\"language-style-btn\" lang-style=\"Academic\">Academic</button>\n            </div>\n        </div>\n\n        <div class=\"language-difficulty-div\">\n            <h6> Difficulty Level</h6>\n            <div>\n                <button class=\"language-diff-btn\" lang-diff=\"Beginner\">Beginner</button>  \n            </div>\n            <div>\n                <button class=\"language-diff-btn\" lang-diff=\"Intermediate\">Intermediate</button> \n            </div>\n            <div>\n                <button class=\"language-diff-btn\" lang-diff=\"Advanced\">Advanced</button>\n            </div>\n        </div>\n\n        <div class=\"chat-container\">\n            <div class=\"chat-header\">choose the language you want to learn</div>\n            <div class=\"chat-messages\" id=\"chat-messages\"></div>\n            <div class=\"input-container\">\n                <input type=\"text\" class=\"chat-input\" id=\"user-input\" placeholder=\"Send a message...\">\n                <button id=\"send-button\">Send</button>\n            </div>\n        </div>\n\n        <div class=\"language-bubbles\">\n            <div class=\"language-bubble\" data-language=\"English\">\n                <img class=\"language-icon\" :src=\"require('@/assets/flag_en.jpg')\" alt=\"English Flag\">\n            </div>\n            <div class=\"language-bubble\" data-language=\"Spanish\">\n                <img class=\"language-icon\" :src=\"require('@/assets/flag_es.png')\" alt=\"Spanish Flag\">\n            </div>\n            <div class=\"language-bubble\" data-language=\"French\">\n                <img class=\"language-icon\" :src=\"require('@/assets/flag_fr.png')\" alt=\"French Flag\">\n            </div>\n            <div class=\"language-bubble\" data-language=\"German\">\n                <img class=\"language-icon\" :src=\"require('@/assets/flag_de.png')\" alt=\"German Flag\">\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nexport default {\n    mounted() {\n        const chatMessages = document.getElementById('chat-messages');\n        const userInput = document.getElementById('user-input');\n        const sendButton = document.getElementById('send-button');\n\n        function appendUserMessage(message) {\n            const userMessageDiv = document.createElement('div');\n            userMessageDiv.className = 'user-message';\n            userMessageDiv.textContent = message;\n            chatMessages.appendChild(userMessageDiv);\n        }\n\n        function appendBotMessage(message) {\n            const botMessageDiv = document.createElement('div');\n            botMessageDiv.className = 'bot-message';\n            botMessageDiv.textContent = message;\n            chatMessages.appendChild(botMessageDiv);\n        }\n\n        function sendMessage() {\n            const userMessage = userInput.value;\n            if (userMessage.trim() !== '') {\n                if (userMessage.trim().toLowerCase() == 'clear') {\n                    clearChat();\n                } else {\n                    setTimeout(() => {\n                        appendUserMessage(userMessage);\n                    }, 300);\n                    setTimeout(() => {\n                        simulateBotTyping();\n                    }, 1300);\n                }\n            }\n            userInput.value = '';\n        }\n\n        function simulateBotTyping(selectedLanguage, selectedLanguageStyle) {\n            // Add \"typing\" indicator message to chat messages\n            const typingIndicator = 'typing...';\n            const typingIndicatorDiv = document.createElement('div');\n            const chatHeader = document.querySelector('.chat-header');\n            const typingDuration = 1500;\n            let botResponse = \"\";\n\n            typingIndicatorDiv.className = 'bot-message typing-indicator';\n            typingIndicatorDiv.textContent = typingIndicator;\n            chatMessages.appendChild(typingIndicatorDiv);\n\n            // Add typing class to trigger animation\n            chatMessages.classList.add('typing');\n\n            setTimeout(() => {\n                // Remove typing class and typing indicator message to stop animation\n                chatMessages.classList.remove('typing');\n                typingIndicatorDiv.remove();\n\n                if (chatHeader.textContent.trim() === 'choose the language you want to learn') {\n                    botResponse = 'Please select a language and style you want to learn';\n                } else {\n                    botResponse = 'Hello, I am langchatAI and I will help you learn ' + selectedLanguageStyle + ' ' + selectedLanguage + '!';\n                }\n\n                appendBotMessage(botResponse);\n\n                // Scroll chat messages container to the bottom to show the new message\n                chatMessages.scrollTop = chatMessages.scrollHeight;\n            }, typingDuration);\n        }\n\n        // Clear all chat messages\n        function clearChat() {\n            chatMessages.innerHTML = '';\n        }\n\n        // Event listeners for sending messages\n        sendButton.addEventListener('click', sendMessage);\n\n        userInput.addEventListener('keydown', function(event) {\n            if (event.key === 'Enter') {\n                sendMessage();\n            }\n        });\n\n        //Get Input from Buttons (Language, Style and Difficulty) to use in Chat Window\n        document.addEventListener(\"DOMContentLoaded\", function() {\n            const languageBubbles = document.querySelectorAll('.language-bubble');\n            const languageStyleButtons = document.querySelectorAll('.language-style-btn');\n            const languageDiffButtons = document.querySelectorAll('.language-diff-btn');\n            const chatHeader = document.querySelector('.chat-header');\n\n            let selectedLanguage = '';\n            let selectedLanguageStyle = '';\n            let selectedLanguageDiff = '';\n\n            languageBubbles.forEach(bubble => {\n                bubble.addEventListener('click', function() {\n                    // Get the selected language from the clicked bubble\n                    selectedLanguage = bubble.dataset.language;\n\n                    // Remove 'selected' class from all language bubbles and style/diff buttons & Add 'selected' class to the clicked bubble\n                    languageBubbles.forEach(b => b.classList.remove('selected'));\n                    languageStyleButtons.forEach(btn => btn.classList.remove('selected'));\n                    languageDiffButtons.forEach(btn => btn.classList.remove('selected'));\n                    bubble.classList.add('selected');\n\n                    // Update chat header with selected language\n                    chatHeader.textContent = 'Please select a language style and difficulty level for the ' + selectedLanguage + ' Bot';\n\n                    clearChat();\n                });\n            });\n\n            languageDiffButtons.forEach(button => {\n                button.addEventListener('click', function() {\n                    languageDiffButtons.forEach(btn => btn.classList.remove('selected'));\n                    selectedLanguageDiff = button.getAttribute('lang-diff');\n                    button.classList.add('selected');\n\n                    updateChatHeader();\n                });\n            });\n\n            languageStyleButtons.forEach(button => {\n                button.addEventListener('click', function() {\n                    languageStyleButtons.forEach(btn => btn.classList.remove('selected'));\n                    selectedLanguageStyle = button.getAttribute('lang-style');\n                    button.classList.add('selected');\n\n                    updateChatHeader();\n                });\n            });\n\n            function updateChatHeader() {\n                if (selectedLanguageStyle && selectedLanguageDiff) {\n                    chatHeader.textContent = selectedLanguageDiff + ' ' + selectedLanguageStyle + ' ' + selectedLanguage + ' Bot';\n                    simulateBotTyping(selectedLanguage, selectedLanguageStyle);\n                }\n            }\n\n        });\n    }\n}\n</script>\n\n<style>\n@import url('https://fonts.googleapis.com/css?family=IBM Plex Mono');\n\ndiv.chatwindow {\n    text-align: center;\n    margin-top: 3rem;\n}\n\n/* CHAT */\n\n/*Language Bubbles*/\n.language-bubbles {\nposition: fixed;\ntop: 50%;\nright: 50px;\ndisplay: flex;\nflex-direction: column;\nalign-items: flex-end;\ntransform: translateY(-50%);\n}\n\n.language-bubble {\nwidth: 60px;\nheight: 60px;\nborder-radius: 75%;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nmargin-bottom: 20px;\ncursor: pointer;\ntransition: background-color 0.3s ease;\nborder: 1px solid #a9a9a9;\nbox-shadow: 0 4px 8px #4646461a;\n}\n\n.language-icon {\nwidth: 50px; /* Adjust the icon size */\nheight: 50px; /* Adjust the icon size */\nborder-radius: 50%; /* Ensures the icon is round */\nobject-fit: cover; /* Maintain aspect ratio */\nborder-style: hidden;\n}\n\n.language-bubble:hover {\nbackground-color: #b8b6b6a6;\n}\n\n.language-bubble.selected {\nbackground-color: #b8b6b6a6; \n}\n\n\n/*Language Style*/\n.language-style-div {\n  position: fixed;\n  top: 35%;\n  left: 30px; \n  transform: translateY(-50%);\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  z-index: 999; \n}\n\n.language-style-btn{\n  width: 120px;\n  height: 40px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  background-color: #003EC6;\n  color: #fff;\n  border: none;\n  box-shadow: 2px 2px 2px #0a3899;\n  font-size: 14px;\n}\nbutton{\n    font-family: 'IBM Plex Mono', monospace;\n}\n\n.language-style-btn:hover,#send-button:hover {\n  background-color: #3272fc;\n}\n\n.language-style-btn.selected {\n  background-color: #3272fc;\n}\n\n/*Language Difficulty*/\n.language-difficulty-div {\n  position: fixed;\n  top: 70%;\n  left: 30px; \n  transform: translateY(-50%);\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  z-index: 999; \n}\n.language-diff-btn{\n  width: 120px;\n  height: 40px;\n  border-radius: 10px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-bottom: 20px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n  background-color: #003EC6;\n  color: #fff;\n  border: none;\n  box-shadow: 2px 2px 2px #0a3899;\n  font-size: 14px;\n}\n\n#send-button{\n  width: 80px;\n  height: 30px;\n  margin-left: 10px; \n  margin-right: 10px;\n  cursor: pointer;\n  border-radius: 10px;\n  transition: background-color 0.3s ease;\n  background-color: #003EC6;\n  color: #fff;\n  border: none;\n  box-shadow: 2px 2px 2px #0a3899;\n  font-size: 14px;\n}\n\n.language-diff-btn:hover,#send-button:hover {\n  background-color: #3272fc;\n}\n\n.language-diff-btn.selected {\n  background-color: #3272fc;\n}\n\nh4 {\n  font-size: 15px;\n  margin-bottom: 15px;\n}\n\n\n/* CHAT WINDOW */\n.chat-container {\n  width: 60%;\n  height: 70vh; /* 70% of the viewport height */\n  margin: 20px auto;\n  border: 1px solid #ccc;\n  border-radius: 10px;\n  overflow: hidden;\n  background-color: #fff;\n  box-shadow: 0 20px 20px 20px #a7a7a73a;\n}\n\n.chat-messages {\n  padding: 20px;\n  overflow-y: auto;\n  height: calc(100% - 150px);\n  word-wrap: break-word;\n  font-size: 14px;\n}\n\n.chat-header {\n  background-color: #003EC6;\n  color: #fff;\n  padding: 15px;\n  text-align: center;\n  font-size: 15px;\n}\n\n.user-message, .bot-message {\n  margin-bottom: 10px;\n  display: block; \n  white-space: pre-wrap;\n  clear: both;\n}\n\n.user-message {\n  text-align: right;\n  color: #003EC6;\n  border-radius: 15px;\n  padding: 10px;\n  padding-right: 20px;\n  background-color: #fff;\n  box-shadow: 0 4px 8px #4646461a;\n  border: 2px #003EC6 solid;\n}\n\n.bot-message {\n  text-align: left;\n  color: #0D1117;\n  border: 1px solid #444;\n  border-radius: 15px;\n  padding: 10px;\n  padding-left: 20px;\n  box-shadow: 0 4px 8px #4646461a;\n}\n\n.bot-message.typing-indicator {\n  background-color: transparent;\n  border: none;\n  box-shadow: none;\n}\n\n.chat-input {\n  width: 100%;\n  padding: 10px;\n  border: none;\n  font-size: 14px;\n  resize: vertical;\n  font-family: monospace;\n}\n.input-container {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  border-top: 1px solid #ccc;\n  padding: 10px;\n  margin-top: auto;\n}\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}